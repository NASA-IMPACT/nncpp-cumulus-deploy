{#
  Nunjucks template for generating granule metadata.

  See Nunjucks Templating Documentation:
    https://mozilla.github.io/nunjucks/templating.html
#}

{% set producerGranuleId = granule.meta.ops.DataGranule.Identifiers[0].Identifier %}

{#
  For the data format "ASCII Text" found in the Operational CMR, MAAP CMR is
  standardizing on simply "ASCII", so when the suffix " Text" is encountered,
  we strip it off.
#}
{% set archiveInfo = collection.meta.ops.ArchiveAndDistributionInformation %}
{% set fileInfo = archiveInfo.FileDistributionInformation[0] %}
{% set dataFormat = fileInfo.Format | replace(" Text", "") %}

Granule:
  GranuleUR: "{{ granule.meta.ops.GranuleUR }}"
  InsertTime: "{{ (granule.meta.ops.ProviderDates | selectattr('Type', 'eq', 'Insert') | first).Date }}"
  LastUpdate: "{{ (granule.meta.ops.ProviderDates | selectattr('Type', 'eq', 'Update') | first).Date }}"
  Collection:
    ShortName: "{{ collection.name }}"
    {#
      Metadata for LVISF Collections in both the Operational and MAAP CMRs have
      stripped the leading zeros from the collection version strings, so we're
      converting the version to an integer to drop the leading zeros, but
      surrounding it with quotes to convert it back to a string. For example,
      "001" is converted to "1".
    #}
    VersionId: "{{ collection.version | int }}"

  DataGranule:
    SizeMBDataGranule: {{ granule.meta.ops.DataGranule.ArchiveAndDistributionInformation[0].Size }}
    ProducerGranuleId: "{{ producerGranuleId }}"
    DayNightFlag: "{{ granule.meta.ops.DataGranule.DayNightFlag | upper }}"
    ProductionDateTime: "{{ granule.meta.ops.DataGranule.ProductionDateTime }}"

  {# Rename TemporalExtent to Temporal #}
  Temporal: {{ granule.meta.ops.TemporalExtent | dump }}

  {#
    The polygon points from Operational CMR are in the reverse order expected
    by MAAP CMR validation, so we have to reverse the array of points.  In
    addition, we must also drop the first point because it is the same as the
    last point, and MAAP CMR validation fails on the duplication.
  #}
  {% set hsd = granule.meta.ops.SpatialExtent.HorizontalSpatialDomain %}
  {% set points = hsd.Geometry.GPolygons[0].Boundary.Points | reverse %}
  {% set points = points.slice(1) %}

  {# Rename SpatialExtent to Spatial #}
  Spatial:
    HorizontalSpatialDomain:
      Geometry:
        GPolygon:
          Boundary:
            Point:
              {% for point in points %}
              {# Rename { Longitude, Latitude } to { PointLongitude, PointLatitude } #}
              - PointLongitude: {{ point.Longitude }}
                PointLatitude: {{ point.Latitude }}
              {% endfor %}

  AdditionalAttributes: !echo10/attributes
    Dataset Status: "MAAP Standard Data Product"
    Geolocated: "true"
    Spatial Resolution: "10"
    Data Format: "{{ dataFormat }}"
    Band Center Frequency: "281759.8"
    Swath Width: "2.5"
    Field of View: "12"
    Laser Footprint Diameter: "10"
    Acquisition Type: "Airborne Lidar"
    Band Center Wavelength: "1064"
    Sampling Frequency: "0.25"
    Flight Number: !lvis/flight "{{ producerGranuleId }}"
    Site Name: !lvis/site "{{ producerGranuleId }}"

  OnlineAccessURLs:
    OnlineAccessURL:
      URL: "{{ (granule.files | selectattr('type', 'eq', 'data') | first).filename }}"
      URLDescription: "File to download"

  OnlineResources: []
  Orderable: "true"
  DataFormat: "{{ dataFormat }}"
  Visible: "true"
